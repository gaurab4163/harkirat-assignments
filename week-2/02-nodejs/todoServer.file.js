/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express')
const bodyParser = require('body-parser')
const fs = require('fs')

const app = express()

app.use(bodyParser.json())

let uniqueID = 3

app.get('/todos', function (req, res) {
  let readData
  fs.readFile('todos.json', 'utf-8', function (err, data) {
    if (err) throw err
    res.status(200).json(JSON.parse(data))
  })
})

// GET /todos/:id
app.get('/todos/:id', function (req, res) {
  fs.readFile('todos.json', 'utf-8', function (err, data) {
    if (err) throw err
    let id = parseInt(req.params.id)
    let parsedTodos = JSON.parse(data)
    const todo = parsedTodos.find((todo) => {
      return todo.id === id
    })
    if (todo) {
      res.status(200).json(todo)
    } else {
      res.status(404).json({
        msg: '404 not found',
      })
    }
  })
})

// POST /todos
app.post('/todos', function (req, res) {
  fs.readFile('todos.json', 'utf-8', function (err, data) {
    if (err) throw err
    let parsedData = JSON.parse(data)
    parsedData.push({
      id: uniqueID,
      ...req.body,
    })
    fs.writeFile('todos.json', JSON.stringify(parsedData), function () {
      console.log('data is written now to file')
      res.status(201).json({
        id: uniqueID++,
      })
    })
  })
})

/// PUT todos/:id
app.put('/todos/:id', function (req, res) {
  fs.readFile('todos.json', 'utf-8', function (err, data) {
    if (err) throw err
    const parsedData = JSON.parse(data)

    const index = parsedData
      .map((todo) => todo.id)
      .indexOf(parseInt(req.params.id))
    if (index === -1) {
      res.status(404).send('404 not found')
    } else {
      parsedData[index] = {
        id: parseInt(req.params.id),
        ...req.body,
      }
      fs.writeFile(
        'todos.json',
        JSON.stringify(parsedData),
        function (err, data) {
          console.log('put operation is complete')
          res.status(200).json(parsedData)
        }
      )
    }
  })
})

// DELETE /todos/:id
app.delete('/todos/:id', function (req, res) {
  fs.readFile('todos.json', 'utf-8', function (err, data) {
    if (err) throw err
    const id = parseInt(req.params.id)
    let parsedData = JSON.parse(data)
    const filteredTodos = parsedData.filter(function (todo) {
      if (todo.id !== id) {
        return true
      }
    })
    // id not found
    if (parsedData.length === filteredTodos.length) {
      res.status(404).send('404 not found')
    } else {
      fs.writeFile('todos.json', JSON.stringify(filteredTodos), function () {
        console.log('delete operation is complete')
        res.status(200).json(filteredTodos)
      })
    }
  })
})

// app.listen(3000, () => {
//   console.log('Server is up in port 3000')
// })

module.exports = app
